// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?  @unique
  active             Boolean  @default(false)
  hashedPassword     String?
  description        String?
  imageUrl           String?
  phone              String?
  link               String?
  resumeUrl          String?
  isCompany          Boolean  @default(false)
  favoriteProjectIds String[] @db.ObjectId
  favoriteListingIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects       Project[]
  listings       Listing[]
  activateTokens ActivateToken[]
  applications Application[]
}

model ActivateToken {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  token       String    @unique
  activatedAt DateTime?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  imageUrl    String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  showcaseImages ShowcaseImage[]

  @@fulltext([title])
}

model Listing {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  imageUrl    String?
  description String?
  requirement String?
  location    String?
  state       String?
  summary     String?
  isPublished Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  applications Application[]
  @@fulltext([title])
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  projects Project[]
  listings Listing[]
}

model ShowcaseImage {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Application {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId  @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  listingId String @db.ObjectId @unique
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}